function varargout = experimenterInterface(varargin)
%EXPERIMENTERINTERFACE M-file for experimenterInterface.fig
%   function experimenterInterface
%
%   This experimenterInterface GUI is the first step in AudExpCreator. It 
%   will initiate the creation of your study experiment.
%
%   To start with this function requires the following input from you:
%         
%         1. Your study name. Please try to keep this short as it is to your
%            benefit when calling your study in the future. Also any spaces 
%            typed into the study name will automatically be replaced be an
%            "_" (underscore).
%         
%         2. Your study type. There are 5 main studies to choose from:
%             
%             "Behavioral Rating Study" - Generally this study presents the
%             subject with stimulus or set of stimulus followed by a question
%             or set of questions. This is a MATLAB contained study meaning 
%             all components will be run through MATLAB and subject's responses
%             will be generated into data output by MATLAB also.
%             
%             "Comparison Behav. Rating Study" - This study will present the
%             subject with two stimuli or two sets of stimuli and ask the 
%             subject a question or set of questions and the subject will 
%             response with their choice of stimulus (or set) A or stimulus
%             (or set B). This is also a MATLAB contained study. 
%             
%             "Continuous Behav. Rating Study" - This study will instruct the
%             subject on a specific continuous task to do during the 
%             presentation of the stimulus. Then while the study presents the 
%             stimulus, subject will use the mouse to continous anser the
%             task. As the stimulus plays the study will acquire mouse 
%             position every ~50 ms as data. THis is a MATLAB contained study.
%             
%             "EEG Study" - This study is meant to be an integrated study 
%             between EGI EEG Acquisition system, MATLAB and a NI Device.
%             The basis of this study is to present stimuli to a subject 
%             while their eeg gets recorded via the EGI system and MATLAB 
%             sends stimulus triggers via NI Device to the EGI system.
%             Behavioral rating component as questions are also optional.
%             
%             "Neurophysiological Study" - This study is meant to be an 
%             integrated study between EGI EEG Acquisition system, EGI PIB,
%             MATLAB and a NI Device. The basis of this study is to present
%             stimuli to a as their eeg and physiological responses get 
%             recorded via the EGI system and MATLAB sends stimulus triggers
%             via NI Device to the EGI stysm. This study has the important 
%             component of introducing a short period of "noise" before 
%             stimulus or stimuli set so that a baseline recording of EEG and
%             physiological responses can be acquired. Behavioral rating 
%             component as question are also optional.
%         
%         3. Your study description. Feel free to use this space to specify
%            the parameters of your study. This description will come up when 
%            someone new to your experiment type in "help [your exp. name]"
%            into the MATLAB command window.
%            
%         4. Your study path. Where do you want to save your study? It will 
%            automatically create a your study experiment folder for you in 
%            the location you chose. 
%         
%         5. Bonus: if you selected EEG or Neurophysiological Study, the 
%            interface will also ask you if you want to save out MATLAB data
%            (pertaining to if you have additional questions that requires
%            subject's responses). If not these study will output the data
%            as DINs to the EEG system and EEG data. 
% 
%         6. Bonus cont for EEG or Neurophysiological Study: You will also 
%            be asked on how the study will be outputing signals to the EGI 
%            system. There will be two to choose from. "TTL" method which 
%            uses an NI Device or "TCP/IP" method which uses an ethernet 
%            cable. Choosing between these two methods will determine how 
%            your study sends stimuli trigger information into the EEG
%            recording generated by the EGI system.
%    
%   During the process of creating your experimental study, any progress made
%   will be automatically saved by the toolbox as "studyInfo.mat". Therefore
%   should you close the GUI, do not worry your progress have been saved.
%
%     That's it! Enjoy!
%       - The Creators of AudExpCreator
%
% (c) Duc T. Nguyen and Blair Kaneshiro, 2017
% Distributed under Creative Commons Zero (CC0) license
% Contact: audexpcreator@gmail.com

% Edit the above text to modify the response to help experimenterInterface

% Last Modified by GUIDE v2.5 08-May-2017 13:57:19

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @experimenterInterface_OpeningFcn, ...
    'gui_OutputFcn',  @experimenterInterface_OutputFcn, ...
    'gui_LayoutFcn',  [], ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before experimenterInterface is made visible.
function experimenterInterface_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   unrecognized PropertyName/PropertyValue pairs from the
%            command line (see VARARGIN)
% Choose default command line output for experimenterInterface

addpath(genpath(pwd));

handles.output = hObject;

% Update handles structure

studyType{1}='Behavioral Rating Study';
studyType{2}='Comparison Behav. Rating Study';
studyType{3}='Continuous Behav. Rating Study';
studyType{4}='EEG Study';
studyType{5}='Neurophysiological Study';
set(handles.popupmenu1,'String',studyType);

guidata(hObject, handles);

% UIWAIT makes experimenterInterface wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = experimenterInterface_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
handles.output=[];
varargout{1} = handles.output;



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double



% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1

content=get(handles.popupmenu1,'String');
selected=get(handles.popupmenu1,'Value');
selectedType=content{selected};
handles.studyType = selectedType;

guidata(hObject, handles);


% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

handles.studyPath = uigetdir(pwd, 'Select the path to save your study');

if handles.studyPath == 0;
    warningMessage = 'Please select a path to save the study.';
    pause(0.1);
    warningInterface([],warningMessage);
    drawnow
    return;
else
    set(handles.text5,'String',handles.studyPath, 'FontSize', 8, 'FontWeight', 'normal')
end

guidata(hObject, handles);

% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

studyName = get(handles.edit1,'String');
if isempty(studyName)
    warningMessage = 'Please write in a study name.';
    pause(0.1);
    warningInterface([],warningMessage);
    drawnow
    return;
end

if isstrprop(studyName(1), 'digit')
    warningMessage = 'Your study name cannot start with a number. Please try again.';
    pause(0.1);
    warningInterface([],warningMessage);
    drawnow
    return;
end

if any(isstrprop(studyName,'punct'))
    warningMessage = 'Your study name has a punctuation. Please try again.';
    pause(0.1);
    warningInterface([],warningMessage);
    drawnow
    return;
end

studyName = strrep(studyName,' ','_');
studyName = strrep(studyName,'-','_');

studyDesc = get(handles.edit2,'String');
if isempty(studyDesc)
    warningMessage = 'Please write in a study description.';
    pause(0.1);
    warningInterface([],warningMessage);
    drawnow
    return;
end

if isfield(handles, 'studyPath') == 0
    warningMessage = 'Please select a path to save the study.';
    pause(0.1)
    warningInterface([],warningMessage);
    drawnow
    return;
elseif handles.studyPath == 0
    warningMessage = 'Please select a path to save the study.';
    pause(0.1)
    warningInterface([],warningMessage);
    drawnow
    return;
end

studyInfo.name = studyName;
studyInfo.desc = studyDesc;

try
    studyInfo.type = handles.studyType;
catch
    content=get(handles.popupmenu1,'String');
    selected=get(handles.popupmenu1,'Value');
    studyInfo.type=content{selected};
end

studyInfo.path = handles.studyPath;

mkdir(studyInfo.path,studyInfo.name);
studyInfo.path = [studyInfo.path filesep studyInfo.name];

mkdir(studyInfo.path,'stimulus');
studyInfo.stimPath = [studyInfo.path filesep 'stimulus'];

mkdir(studyInfo.path,'log');
studyInfo.logPath = [studyInfo.path filesep 'log'];

if strcmp(studyInfo.type, 'Neurophysiological Study') || strcmp(studyInfo.type, 'EEG Study')
    normalMessage=['Normally this study does not generate data from subject''s responses as the EEG',...
        ' acquisition system takes care of recording responses into the EEG data. However,',...
        ' should you choose, your study can save subject''s responses out. Would you like to?',...
        ' Please type ''yes'' or ''no''.'];
    yesString=1;
    pause(0.1);
    yesData=userRespInterface(studyInfo,normalMessage,yesString);
    drawnow
    if isempty(yesData)==1
        warningMessage = 'You exit before responding. Try over again.';
        pause(0.1);
        warningInterface(studyInfo,warningMessage);
        drawnow
        return;
    elseif strcmpi(yesData,'yes')
        mkdir(studyInfo.path,'data');
        studyInfo.dataPath = [studyInfo.path filesep 'data'];
    elseif strcmpi(yesData,'no')
    else
        warningMessage = 'You''ve entered an invalid response. Try over again.';
        pause(0.1);
        warningInterface(studyInfo,warningMessage);
        drawnow
        return;
    end
    
    normalMessage=['How do you want to output your triggers into the EGI System? Via TTL (NI Device) or',...
        ' TCP/IP (ethernet cable)? Please type ''TTL'' or ''TCP/IP''.'];
    yesString=1;
    signalType=userRespInterface(studyInfo,normalMessage,yesString);
    if isempty(signalType)==1
        warningMessage = 'You exit before responding. Try over again.';
        pause(0.1);
        warningInterface(studyInfo,warningMessage);
        drawnow
        return;
    elseif strcmpi(signalType,'TTL')
        studyInfo.signalType='TTL';
    elseif strcmpi(signalType,'TCP/IP')
        studyInfo.signalType='TCP/IP';
    else
        warningMessage = 'You''ve entered an invalid response. Try over again.';
        pause(0.1);
        warningInterface(studyInfo,warningMessage);
        drawnow
        return;
    end
else
    mkdir(studyInfo.path,'data');
    studyInfo.dataPath = [studyInfo.path filesep 'data'];
end

handles.studyInfo = studyInfo;
guidata(hObject, handles);

clc;
close;

studyInfo.lastComp='experimenterInterface';
studyInfo.nextStep='getBasicParameters(studyInfo)';

save studyInfo.mat studyInfo

pause(0.1);
getBasicParameters(studyInfo);
drawnow


% --- Executes on key press with focus on pushbutton2 and none of its controls.
function pushbutton2_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  structure with the following fields (see UICONTROL)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)
handles = guidata(hObject);
pushbutton2_Callback(hObject, eventdata, handles);


% --- Executes on key press with focus on pushbutton1 and none of its controls.
function pushbutton1_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  structure with the following fields (see UICONTROL)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)
handles = guidata(hObject);
pushbutton1_Callback(hObject, eventdata, handles);
